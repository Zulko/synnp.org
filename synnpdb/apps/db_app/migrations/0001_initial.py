# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-01-08 14:41
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Assay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('results_summary', models.CharField(help_text=b'Quick summary of what was found in the assay.', max_length=1000, verbose_name='Results summary')),
            ],
        ),
        migrations.CreateModel(
            name='Assembly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('sequence', models.CharField(help_text=b'The sequence of the construct stored in genbank format with annotations, so that it can be nicely displayed', max_length=50000, verbose_name=b'Sequence')),
            ],
        ),
        migrations.CreateModel(
            name='Backbone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('description', models.CharField(help_text=b'Description of the backbone (resistance, rep. origin). May be extended in the future.', max_length=255, verbose_name='description')),
            ],
        ),
        migrations.CreateModel(
            name='Compound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text=b'Common name of the compound.', max_length=255, verbose_name='Name')),
                ('derived_from', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_app.Compound')),
            ],
        ),
        migrations.CreateModel(
            name='DNAPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('type', models.CharField(help_text=b"One of 'promoter', 'terminator', 'CDS'", max_length=255, verbose_name='Type')),
                ('sequence', models.CharField(help_text=b'A valid ATGC sequence', max_length=50000, validators=[django.core.validators.RegexValidator(b'^[CAGTcagt]+$', message=b'Not a valid DNA sequence.')], verbose_name='Type')),
                ('from_organism', models.CharField(help_text=b'Original organism for the sequence (if applicable)', max_length=255, verbose_name='Organism')),
            ],
        ),
        migrations.CreateModel(
            name='LabMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Laboratory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField()),
                ('name', models.CharField(help_text=b'Name of the laboratory (e.g. Cai Lab)', max_length=255, verbose_name='Name')),
            ],
        ),
        migrations.CreateModel(
            name='Oligo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('ordering_batch', models.CharField(max_length=255, verbose_name='Name')),
            ],
        ),
        migrations.CreateModel(
            name='Organism',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('taxid', models.CharField(help_text=b'Taxonomic ID of the organism', max_length=255, verbose_name='TaxID')),
                ('infos', models.CharField(help_text=b'Any useful infos on the organism.', max_length=255, verbose_name='infos')),
            ],
        ),
        migrations.CreateModel(
            name='Pathway',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text=b'Common name of the pathway', max_length=255, verbose_name='Name')),
                ('is_core_pathway', models.BooleanField(help_text=b'True or False whether other pathways are built around this pathway', verbose_name='Is core Pathway')),
                ('compound', models.ForeignKey(help_text=b'Compound produced by the pathway', on_delete=django.db.models.deletion.CASCADE, to='db_app.Compound')),
            ],
        ),
        migrations.CreateModel(
            name='Protein',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('protein_id', models.CharField(help_text=b'ID of the protein e.g. B0B503', max_length=255, verbose_name='ProteinID')),
                ('sequence', models.CharField(help_text=b'Amino-acid sequence of the protein e.g. MSSEDKLR...', max_length=255, verbose_name='Sequence')),
            ],
        ),
        migrations.CreateModel(
            name='StorageLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(help_text=b'Description to locate the sample (may be lab-specific)', max_length=255, verbose_name='Location')),
                ('laboratory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_app.Laboratory')),
            ],
        ),
        migrations.CreateModel(
            name='Strain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('assembly', models.ForeignKey(help_text=b'Construct contained by the strain (void if none)', on_delete=django.db.models.deletion.CASCADE, to='db_app.Assembly')),
                ('organism', models.ForeignKey(help_text=b'Original organism of the strain', on_delete=django.db.models.deletion.CASCADE, to='db_app.Organism')),
            ],
        ),
        migrations.CreateModel(
            name='YACassembly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_app.Assembly')),
            ],
        ),
        migrations.CreateModel(
            name='CDS',
            fields=[
                ('part', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='db_app.DNAPart')),
                ('codon_optimization_method', models.CharField(help_text=b'Name or reference of the optimization method used (the details and steps of the method can be kept outside the DB)', max_length=255, verbose_name='Optimization')),
                ('derived_from', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_app.CDS')),
                ('optimized_for', models.ForeignKey(help_text=b'Indicates the organism that the CDS was optimized for', on_delete=django.db.models.deletion.CASCADE, to='db_app.Organism')),
                ('protein', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_app.Protein')),
            ],
        ),
        migrations.AddField(
            model_name='pathway',
            name='enzymes',
            field=models.ManyToManyField(help_text=b'All enzymes in the pathway', to='db_app.Protein'),
        ),
        migrations.AddField(
            model_name='oligo',
            name='target_part',
            field=models.ForeignKey(help_text=b'The Part that will be obtained with this oligo', on_delete=django.db.models.deletion.CASCADE, to='db_app.DNAPart'),
        ),
        migrations.AddField(
            model_name='labmember',
            name='laboratory',
            field=models.ForeignKey(help_text=b"Name of the user's laboratory.", on_delete=django.db.models.deletion.CASCADE, to='db_app.Laboratory'),
        ),
        migrations.AddField(
            model_name='labmember',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assembly',
            name='backbone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_app.Backbone'),
        ),
        migrations.AddField(
            model_name='assembly',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_app.StorageLocation'),
        ),
        migrations.AddField(
            model_name='assembly',
            name='parts',
            field=models.ManyToManyField(help_text=b' All DNAParts featured the construct. Note that this field does not give the order in which the parts are assembled. This order is given in the sequence.', to='db_app.DNAPart'),
        ),
        migrations.AddField(
            model_name='assay',
            name='strain',
            field=models.ForeignKey(help_text=b'Strain on which the assay was made.', on_delete=django.db.models.deletion.CASCADE, to='db_app.Strain'),
        ),
    ]
